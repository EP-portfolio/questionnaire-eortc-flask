"""
Script pour pr√©-g√©n√©rer tous les audios du questionnaire
√Ä lancer une fois au d√©but pour cr√©er le cache permanent
VERSION MISE √Ä JOUR avec audio de test
"""

import os
import sys
from pathlib import Path
import streamlit as st

# Ajouter le dossier parent au path pour importer les modules
sys.path.insert(0, str(Path(__file__).parent))

from questionnaire_logic import EORTCQuestionnaire
from audio_handler_gcp_tts import AudioHandler


def pregenerate_all_audios():
    """Pr√©-g√©n√®re tous les audios du questionnaire"""

    print("=" * 70)
    print("üéµ PR√â-G√âN√âRATION DES AUDIOS DU QUESTIONNAIRE EORTC QLQ-C30")
    print("=" * 70)

    # Initialiser le questionnaire
    questionnaire = EORTCQuestionnaire()

    # R√©cup√©rer la cl√© API
    api_key = (
        st.secrets.get("GOOGLE_CLOUD_API_KEY", None) if hasattr(st, "secrets") else None
    )
    if not api_key:
        print("\n‚ùå ERREUR: Variable GOOGLE_CLOUD_API_KEY non d√©finie")
        print("\nSolution:")
        print("  export GOOGLE_CLOUD_API_KEY='votre_cl√©_ici'")
        return

    print(f"‚úÖ Cl√© API d√©tect√©e: {api_key[:15]}...{api_key[-10:]}")

    # Initialiser le gestionnaire audio avec Gemini Pro TTS
    print("\nüé≠ Initialisation de Gemini Pro TTS (voix Achernar)...")
    audio_handler = AudioHandler(
        api_key=api_key, use_gemini_tts=True, use_pro_model=True
    )

    # Collecter tous les textes √† g√©n√©rer
    texts_to_generate = []

    # 0. Message de test audio (NOUVEAU)
    test_audio_text = "Ceci est un test audio. Si vous entendez ce message, l'audio fonctionne correctement."
    texts_to_generate.append(("Test audio", test_audio_text))

    # 1. Message de bienvenue
    welcome_text = """Bienvenue sur le Questionnaire C30. 
        Ce questionnaire √©value votre qualit√© de vie. 
        Il comporte 30 questions.
        Vous avez la possibilit√© pour chaque question de r√©pondre oralement en cliquant sur le bouton rouge avec un micro.
        Vous pouvez √©galement r√©pondre manuellement en cliquant sur la r√©ponse correspondante.
        Veuillez saisir vos initiales, votre date de naissance, et confirmer la date d'aujourd'hui."""
    texts_to_generate.append(("Message de bienvenue", welcome_text))

    # 2. Les 30 questions avec leurs options
    for q_num in range(1, 31):
        question_data = questionnaire.get_question(q_num)
        if question_data:
            speech_text = questionnaire.get_speech_text(q_num)
            texts_to_generate.append((f"Question {q_num}", speech_text))

    # 3. Messages d'aide
    help_messages = {
        "Initiales": "Saisissez vos initiales. Par exemple, A B pour Andr√© Bernard.",
        "Naissance": "S√©lectionnez votre date de naissance dans le calendrier.",
        "Audio": "Activez pour entendre les questions.",
        "Erreur r√©ponse": "R√©ponse non reconnue. Veuillez r√©essayer ou utilisez les boutons.",
        "Aucune parole": "Aucune parole d√©tect√©e. Veuillez r√©essayer.",
        "Parole non comprise": "Parole non comprise. Veuillez r√©essayer.",
        "Attention initiales": "Attention. Veuillez saisir vos initiales avant de continuer.",
        "R√©ponses 1-4": "Les r√©ponses possibles sont : pas du tout, un peu, assez, beaucoup",
        "R√©ponses 1-7": "Les r√©ponses possibles sont : un, deux, trois, quatre, cinq, six, sept",
    }

    for name, text in help_messages.items():
        texts_to_generate.append((f"Aide: {name}", text))

    # 4. Message de r√©sultat (format g√©n√©ral pour toutes les situations)
    result_texts = [
        """F√©licitations, vous avez termin√© le questionnaire. 
        Vous avez r√©pondu √† 30 questions sur 30. 
        Toutes les questions ont √©t√© r√©pondues.
        Vous pouvez maintenant t√©l√©charger vos r√©sultats ou recommencer un nouveau questionnaire.""",
        """F√©licitations, vous avez termin√© le questionnaire. 
        Vous avez r√©pondu √† 29 questions sur 30. 
        1 questions restent sans r√©ponse.
        Vous pouvez maintenant t√©l√©charger vos r√©sultats ou recommencer un nouveau questionnaire.""",
    ]

    for idx, text in enumerate(result_texts):
        texts_to_generate.append((f"Message de r√©sultat {idx+1}", text))

    print(f"\nüìù Total de textes √† pr√©-g√©n√©rer: {len(texts_to_generate)}")

    # V√©rifier le cache actuel
    cache_info = audio_handler.get_cache_info()
    print(
        f"üì¶ Cache actuel: {cache_info['count']} fichiers ({cache_info['size_mb']:.2f} MB)"
    )
    print(f"üìÇ Emplacement: {cache_info['path']}")

    # Demander confirmation
    print("\n‚ö†Ô∏è  ATTENTION:")
    print("  ‚Ä¢ Cette op√©ration peut prendre 5-10 minutes")
    print("  ‚Ä¢ Vous serez factur√© pour la g√©n√©ration des nouveaux audios")
    print(
        f"  ‚Ä¢ Co√ªt estim√©: ~{len(texts_to_generate) * 500 / 1000000 * 21:.2f} ‚Ç¨ (si tous nouveaux)"
    )

    response = input("\n‚ñ∂Ô∏è  Continuer ? (oui/non): ").strip().lower()
    if response not in ["oui", "o", "yes", "y"]:
        print("\n‚ùå Annul√© par l'utilisateur")
        return

    print("\n" + "=" * 70)
    print("üöÄ D√âBUT DE LA PR√â-G√âN√âRATION")
    print("=" * 70 + "\n")

    # Pr√©-g√©n√©rer tous les audios
    only_texts = [text for name, text in texts_to_generate]

    def progress_callback(current, total):
        percent = (current / total) * 100
        bar_length = 50
        filled = int(bar_length * current / total)
        bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)
        print(
            f"\r  Progression: [{bar}] {percent:.1f}% ({current}/{total})",
            end="",
            flush=True,
        )

    audio_handler.pregenerate_audio(only_texts, progress_callback)

    print("\n")

    # Afficher les statistiques finales
    final_cache_info = audio_handler.get_cache_info()
    print("\n" + "=" * 70)
    print("‚úÖ PR√â-G√âN√âRATION TERMIN√âE")
    print("=" * 70)
    print(f"\nüìä Statistiques du cache:")
    print(f"   ‚Ä¢ Fichiers: {final_cache_info['count']}")
    print(f"   ‚Ä¢ Taille: {final_cache_info['size_mb']:.2f} MB")
    print(f"   ‚Ä¢ Emplacement: {final_cache_info['path']}")

    print(f"\nüéâ Tous les audios sont maintenant en cache !")
    print(
        f"üì± Vous pouvez lancer l'application, les questions seront lues instantan√©ment."
    )
    print(f"\nüí° Conseil: Conservez le dossier .audio_cache pour ne pas r√©g√©n√©rer")
    print(
        f"\nüìù N'oubliez pas de pusher le dossier .audio_cache sur Git pour Streamlit Cloud"
    )


if __name__ == "__main__":
    try:
        pregenerate_all_audios()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Interrompu par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback

        traceback.print_exc()
