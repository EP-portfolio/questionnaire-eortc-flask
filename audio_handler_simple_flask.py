"""
Gestionnaire audio simplifi√© pour le web (sans pygame ni speech_recognition)
Version optimis√©e avec reconnaissance vocale TR√àS am√©lior√©e
"""

import requests
import threading
import time
import tempfile
import os
import hashlib
import wave
import struct
from typing import Optional, List
from pathlib import Path
import re


class AudioHandlerSimple:
    """Gestionnaire audio simplifi√© pour le web"""

    def __init__(
        self,
        api_key: str = None,
        use_gemini_tts: bool = False,
        use_pro_model: bool = True,
    ):
        self.api_key = api_key or os.environ.get("GOOGLE_CLOUD_API_KEY")
        if not self.api_key:
            print("ATTENTION: Cle API Google Cloud non configuree!")

        self.use_gemini_tts = use_gemini_tts

        if use_gemini_tts:
            if use_pro_model:
                self.model = "gemini-2.5-pro-preview-tts"
                print("Utilisation de Gemini Pro TTS (voix Achernar - qualite premium)")
            else:
                self.model = "gemini-2.5-flash-preview-tts"
                print("Utilisation de Gemini Flash TTS (voix Achernar - economique)")

            self.api_url = f"https://generativelanguage.googleapis.com/v1beta/models/{self.model}:generateContent"
            self.voice_name = "Achernar"
        else:
            self.api_url = "https://texttospeech.googleapis.com/v1/text:synthesize"
            self.voice_name = "fr-FR-Neural2-A"
            self.language_code = "fr-FR"
            print("Utilisation de Cloud Text-to-Speech (voix Neural2)")

        self.is_speaking = False
        self.current_thread = None
        self.stop_flag = threading.Event()
        self._lock = threading.Lock()

        cache_type = (
            f"{self.model if use_gemini_tts else 'cloud_tts'}_{self.voice_name}"
        )

        project_dir = Path(__file__).parent
        self.cache_dir = project_dir / "static" / "audio_cache" / cache_type
        self.cache_dir.mkdir(parents=True, exist_ok=True)

        print(f"Cache permanent : {self.cache_dir}")

    def _get_cache_path(self, text: str, use_style_prompt: bool = True) -> Path:
        """G√©n√®re le chemin de cache pour un texte donn√©"""
        cache_key = f"{self.voice_name}_{text}"
        text_hash = hashlib.md5(cache_key.encode("utf-8")).hexdigest()
        return self.cache_dir / f"{text_hash}.wav"

    def get_audio_path(self, text: str) -> Optional[Path]:
        """Retourne le chemin du fichier audio (pour lecture web)"""
        cache_path = self._get_cache_path(text)
        if cache_path.exists():
            return cache_path
        return None

    def get_cache_info(self) -> dict:
        """Retourne des informations d√©taill√©es sur le cache"""
        try:
            files = list(self.cache_dir.glob("*.wav"))
            total_size = sum(f.stat().st_size for f in files)
            return {
                "count": len(files),
                "size_bytes": total_size,
                "size_mb": total_size / (1024 * 1024),
                "path": str(self.cache_dir),
            }
        except:
            return {
                "count": 0,
                "size_bytes": 0,
                "size_mb": 0,
                "path": str(self.cache_dir),
            }


class VoiceRecognitionHandler:
    """Gestionnaire de reconnaissance vocale TR√àS am√©lior√©"""

    def __init__(self):
        self.recognition_enabled = False
        print("INFO Reconnaissance vocale configur√©e pour Web Speech API uniquement")

    def _normalize_text(self, text: str) -> str:
        """Normalise le texte pour la comparaison"""
        text = text.lower().strip()
        # Supprimer accents
        text = text.replace("√©", "e").replace("√®", "e").replace("√™", "e")
        text = text.replace("√†", "a").replace("√¢", "a")
        text = text.replace("√π", "u").replace("√ª", "u")
        text = text.replace("√¥", "o")
        text = text.replace("√ß", "c")
        # Supprimer ponctuation
        text = re.sub(r"[^\w\s]", " ", text)
        # Supprimer espaces multiples
        text = re.sub(r"\s+", " ", text).strip()
        return text

    def _contains_word(self, text: str, keywords: list) -> bool:
        """
        V√©rifie si un mot de la liste est pr√©sent (mot entier ou expression)
        """
        text_normalized = self._normalize_text(text)

        for keyword in keywords:
            keyword_normalized = self._normalize_text(keyword)

            # V√©rifier si le mot/expression est pr√©sent avec d√©limiteurs
            pattern = r"\b" + re.escape(keyword_normalized) + r"\b"
            if re.search(pattern, text_normalized):
                return True

            # Aussi v√©rifier sans d√©limiteurs pour les expressions multi-mots
            if " " in keyword_normalized and keyword_normalized in text_normalized:
                return True

        return False

    def interpret_response(self, text: str, scale: str) -> Optional[int]:
        """Interpr√®te une r√©ponse vocale et retourne le score"""
        if not text:
            return None

        text_original = text
        text = self._normalize_text(text)

        print(f"DEBUG - Texte original: '{text_original}'")
        print(f"DEBUG - Texte normalis√©: '{text}' (echelle: {scale})")
        print(f"DEBUG - Longueur: {len(text)} caracteres")

        # Rejeter les phrases trop longues (> 40 caract√®res)
        if len(text) > 40:
            print("ERREUR - Phrase trop longue, probablement pas une reponse valide")
            return None

        # Rejeter les mots non-valides
        invalid_words = [
            "passer",
            "passe",
            "pass",
            "suivant",
            "suivante",
            "next",
            "skip",
            "ignorer",
            "attendre",
            "attends",
        ]
        if any(word in text.split() for word in invalid_words):
            print("ERREUR - Mot non-valide detecte")
            return None

        if scale == "1-4":
            # ORDRE DE PRIORIT√â (du plus sp√©cifique au plus g√©n√©ral)

            # 1. Expressions multi-mots (PRIORIT√â MAXIMALE)
            if self._contains_word(
                text, ["pas du tout", "jamais", "aucunement", "nullement"]
            ):
                print("OK - Reconnu: 1 (pas du tout)")
                return 1

            if self._contains_word(text, ["un peu", "legerement", "peu"]):
                print("OK - Reconnu: 2 (un peu)")
                return 2

            # ============================================
            # üÜï NOUVELLES VARIANTES POUR "ASSEZ" (score 3)
            # ============================================
            if self._contains_word(
                text,
                [
                    "assez",
                    "moyennement",
                    "moderement",
                    "plutot",
                    # üÜï Nouvelles variantes ajout√©es
                    "ac",  # "AC"
                    "asset",  # "asset"
                    "ah c'est",  # "ah c'est" (avec apostrophe)
                    "ah cest",  # "ah cest" (sans apostrophe)
                    "ah ses",  # Variante phon√©tique suppl√©mentaire
                    "ah set",  # Variante phon√©tique suppl√©mentaire
                ],
            ):
                print("OK - Reconnu: 3 (assez)")
                return 3

            # 2. "Beaucoup" et variantes (CRITIQUE - am√©lioration majeure)
            beaucoup_variants = [
                "beaucoup",
                "boucoup",
                "bocoup",
                "boku",
                "bocou",
                "beaucou",
                "beaukou",
                "bokoup",
                "bokou",
                "beacoup",
                "bocou",
                "bocoups",
                "tres",
                "enormement",
                "completement",
                "tout a fait",
                "vraiment",
            ]
            if self._contains_word(text, beaucoup_variants):
                print("OK - Reconnu: 4 (beaucoup)")
                return 4

            # 3. Chiffres en fran√ßais (AM√âLIORATION - plus de variantes)
            chiffres_francais = {
                # Chiffre 1
                "un": 1,
                "une": 1,
                "ain": 1,
                "eun": 1,
                "hun": 1,
                "in": 1,
                # Chiffre 2
                "deux": 2,
                "deu": 2,
                "de": 2,
                "d": 2,
                # Chiffre 3
                "trois": 3,
                "troi": 3,
                "troy": 3,
                "troa": 3,
                # Chiffre 4
                "quatre": 4,
                "quatr": 4,
                "quat": 4,
                "katre": 4,
                "cat": 4,
            }

            words = text.split()
            for word in words:
                if word in chiffres_francais:
                    score = chiffres_francais[word]
                    if score <= 4:
                        print(f"OK - Reconnu: {score} (chiffre francais '{word}')")
                        return score

            # 4. Chiffres arabes
            if text in ["1", "2", "3", "4"]:
                score = int(text)
                print(f"OK - Reconnu: {score} (chiffre arabe)")
                return score

            # 5. Recherche de chiffres dans le texte
            digit_match = re.search(r"\b([1-4])\b", text)
            if digit_match:
                score = int(digit_match.group(1))
                print(f"OK - Reconnu: {score} (chiffre trouve dans le texte)")
                return score

        elif scale == "1-7":
            # ORDRE DE PRIORIT√â pour √©chelle 1-7

            # 1. Expressions qualitatives
            if self._contains_word(
                text, ["tres mauvais", "horrible", "terrible", "nul"]
            ):
                print("OK - Reconnu: 1 (tres mauvais)")
                return 1

            if self._contains_word(text, ["mauvais", "mal", "pas bon"]):
                print("OK - Reconnu: 2 (mauvais)")
                return 2

            if self._contains_word(
                text, ["plutot mauvais", "pas bien", "pas terrible"]
            ):
                print("OK - Reconnu: 3 (plutot mauvais)")
                return 3

            if self._contains_word(text, ["moyen", "neutre", "correct", "ca va"]):
                print("OK - Reconnu: 4 (moyen)")
                return 4

            if self._contains_word(text, ["plutot bon", "plutot bien", "assez bien"]):
                print("OK - Reconnu: 5 (plutot bon)")
                return 5

            if self._contains_word(text, ["bon", "bien"]):
                print("OK - Reconnu: 6 (bon)")
                return 6

            if self._contains_word(
                text, ["tres bon", "excellent", "parfait", "super", "genial"]
            ):
                print("OK - Reconnu: 7 (excellent)")
                return 7

            # 2. Chiffres en fran√ßais (1-7)
            chiffres_francais_1_7 = {
                "un": 1,
                "une": 1,
                "ain": 1,
                "eun": 1,
                "deux": 2,
                "deu": 2,
                "de": 2,
                "trois": 3,
                "troi": 3,
                "troy": 3,
                "quatre": 4,
                "quatr": 4,
                "quat": 4,
                "cinq": 5,
                "saink": 5,
                "sink": 5,
                "sain": 5,
                "six": 6,
                "si": 6,
                "sis": 6,
                "cis": 6,
                "sept": 7,
                "set": 7,
                "cet": 7,
                "sete": 7,
            }

            words = text.split()
            for word in words:
                if word in chiffres_francais_1_7:
                    score = chiffres_francais_1_7[word]
                    if score <= 7:
                        print(f"OK - Reconnu: {score} (chiffre francais '{word}')")
                        return score

            # 3. Chiffres arabes
            if text in ["1", "2", "3", "4", "5", "6", "7"]:
                score = int(text)
                print(f"OK - Reconnu: {score} (chiffre arabe)")
                return score

            # 4. Recherche de chiffres dans le texte
            digit_match = re.search(r"\b([1-7])\b", text)
            if digit_match:
                score = int(digit_match.group(1))
                print(f"OK - Reconnu: {score} (chiffre trouve dans le texte)")
                return score

        print(f"ERREUR - Aucune correspondance trouvee pour: '{text}'")
        print(f"DEBUG - Mots detectes: {text.split()}")
        return None
